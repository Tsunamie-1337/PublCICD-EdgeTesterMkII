node {
    checkout scm
    withEnv(['HOME=.']) {          
                stage ('Build') {
                    sh """
                        cd src/optA-Shell-script/app  #FIX change back later to src/app
                        docker-compose build
                    """
                }
                
 stage('Upload to IEM and deploy') {
  withCredentials([usernamePassword(credentialsId: 'iem-creds', usernameVariable: 'IEM_USER', passwordVariable: 'IEM_PW')]) {
    sh '''
      set -e

      echo "----- Prepare workspace -----"
      rm -rf workspace
      mkdir workspace
      cp -RT src/optA-Shell-script/app ./workspace
      cd workspace

      # ensure dirs referenced by docker-compose.prod.yml exist
      mkdir -p publish cfg-data html

      # set publisher workspace to the real absolute path
      PUBLISHER_WS="$(pwd)"
      echo "DEBUG: publisher workspace = $PUBLISHER_WS"
      iectl config add publisher --name "publisherdev" --dockerurl "http://127.0.0.1:2375" --workspace "$PUBLISHER_WS"

      # optional: init workspace metadata for iectl
      iectl publisher workspace init || true

      echo "----- IEM login (secure) -----"
      export IE_SKIP_CERTIFICATE=true
      export EDGE_SKIP_TLS=1
      # use stdin to avoid password on commandline
      echo "$IEM_PW" | iectl config add iem --name "iemdev" --url "$IEM_URL" --user "$IEM_USER" --password-stdin

      # get new version (example: increment patch from IEM; fallback to BUILD_NUMBER)
      OLD_VERSION=$(iectl iem app-project app-details --project-name "$PROJECT_NAME" --app-name "$APP_NAME" 2>/dev/null | jq -r '.versions[0].versionNumber // "0.0.0"')
      IFS='.' read -r -a parts <<< "$OLD_VERSION"
      parts[2]=$(( ${parts[2]:-0} + 1 ))
      NEW_VERSION="${parts[0]}.${parts[1]}.${parts[2]}"
      echo "DEBUG: new version = $NEW_VERSION"

      echo "----- Create new app version -----"
      CREATE_OUTPUT=$(iectl publisher app-project version create \
        -a "$APP_ID" \
        -v "$NEW_VERSION" \
        -y ./docker-compose.prod.yml \
        -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
        -s 'hello-edge' -t 'FromBoxReverseProxy' -u 'hello-edge' -r '/' 2>&1) || true
      echo "CREATE_OUTPUT: $CREATE_OUTPUT"

      # check if create succeeded (simple heuristic)
      echo "$CREATE_OUTPUT" | grep -i "Error" && { echo "IECTL create failed"; exit 1; } || echo "IECTL create seems OK"

      # optional: install to device
      iectl iem app-project install -a "$APP_NAME" --version "$NEW_VERSION" --info-map "{\"devices\":[\"$DEVICE_ID\"]}" || true

      # debug final config
      iectl config list | sed -n '/publisher/,/configtype/p'
    '''
  }
}

                stage('Cleanup Docker') {
                    sh '''
                    docker ps -a | grep docker:24-dind | awk \'{print $1}\' | xargs -r docker rm -f
                    docker system prune -af || true
                    docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi || true
                    '''
                }
    }        
 }

