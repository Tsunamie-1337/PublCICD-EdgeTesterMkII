node {

    //Set Absolute Path to src files here
    env.PROJECT_PATH_PREFIX="src/optB-Docker-inJenkins"

    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2375:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            // This script could be removed on stronger systems
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        sh "docker --host tcp://localhost:2375 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) {
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd src/app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                
                stage('Upload to IEM and deploy on Device') {
                    sh '''
                    # A flag for bash scripts to exit on error
                    set -e

                    #set envireonment variables for iectl
                    export IE_SKIP_CERTIFICATE=true
                    export EDGE_SKIP_TLS=1

                    echo "----- Prepare workspace ------"
                    #cp -RT src/app /app/src/workspace
                    cd /app/src/workspace

                    echo "----- Set publisher configuration ------"
                    iectl config add publisher --name "publisherdev" --dockerurl "http://docker:2375" --workspace "/app/src/workspace"
                    iectl publisher workspace init

                    echo "----- IEM Login ------"
                    iectl config add iem --name 'iemdev' --url "${IEM_URL}" --user "${USER_NAME}" --password "${PSWD}"

                    echo "----- Create new app version ------"
                    # I have used BUILD_NUMBER from Jenkins to create versions. If the apps are being deployed differentley as well you would need to get the version via "app-details"
                    # This line can be used as an example to get last app version: OLD_VERSION=$(iectl iem app-project app-details --project-name "XXX" --app-name "XXX" | jq -r '.versions[0].versionNumber // "0.0.0"') 
                    iectl publisher app-project version create \
                        -a "${APP_ID}" \
                        -v "0.0.${BUILD_NUMBER}" \
                        -y ./docker-compose.prod.yml \
                        -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
                        -s 'hello-edge' \
                        -t 'FromBoxReverseProxy' \
                        -u 'hello-edge' \
                        -r '/'

                    echo "----- Deploy on edge device ------"
                    iectl iem app-project install \
                        -a "${APP_NAME}" \
                        --version "0.0.${BUILD_NUMBER}" \
                        -i '{"devices":["'"${EDGE_DEVICE_ID}"'"]}'
                    '''
                }

                stage('Cleanup Docker') {
                    sh """
                    docker ps -a | grep docker:24-dind | awk \'{print \$1}\' | xargs -r docker rm -f
                    docker system prune -af || true
                    docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi || true
                    """
                }
            }        
        }
    }
}

/*
                stage('Upload to IEM and deploy on Device') {
                    sh '''
                    # A flag for bash scripts to exit on error
                    set -e

                    echo "----- Prepare workspace ------"
                    mkdir -p /app/src/workspace # TODO moved to dockerfile for the docker registry remove later TODO needs to be recompiled and uploaded for that
                    cp -RT src/app /app/src/workspace
                    cd /app/src/workspace

                    echo "----- Set publisher configuration ------"
                    iectl config add publisher --name "publisher-dind" --dockerurl "http://docker:2375" --workspace "."

                    echo "----- IEM Login ------"
                    export IE_SKIP_CERTIFICATE=true
                    export EDGE_SKIP_TLS=1
                    iectl config add iem --name 'iemdev' --url "${IEM_URL}" --user "${USER_NAME}" --password "${PSWD}"

                    echo "----- Create new app version ------"
                    # I have used BUILD_NUMBER from Jenkins to create versions. If the apps are being deployed differentley as well you would need to get the version via "app-details"
                    # This line can be used as an example to get last app version: OLD_VERSION=$(iectl iem app-project app-details --project-name "XXX" --app-name "XXX" | jq -r '.versions[0].versionNumber // "0.0.0"') 
                    iectl publisher app-project version create \
                        -a "${APP_ID}" \
                        -v "0.0.${BUILD_NUMBER}" \
                        -y ./docker-compose.prod.yml \
                        -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
                        -s 'hello-edge' \
                        -t 'FromBoxReverseProxy' \
                        -u 'hello-edge' \
                        -r '/'

                    echo "----- Deploy on edge device ------"
                    iectl iem app-project install \
                        -a "${APP_NAME}" \
                        --version "0.0.${BUILD_NUMBER}" \
                        -i '{"devices":["'"${EDGE_DEVICE_ID}"'"]}'
                    '''
                }

Current Situation: The Docker registry still had code with ie-publisher elements. I commented the lines out in the dockerfile from the dockerfile folder. I published it on tsunamie1337/cicd-pipeline-mk2:tester and set the variable in jenkins

If i cd before the publisher ws init i get the erro that the folder would be apparently not empty Workspace /app/src/workspace is not valid. Please provide path of an empty folder.

I need to figure out where te error invalid docker compose file comes from or try again to upload with ehe example below

cd /var/lib/jenkins/workspace/Jankis
sudo rm -rf * .[!.]* ..?*




https://github.com/industrial-edge/upload-app-to-iem-with-iectl/blob/master/src/script.sh

#DON'T FORGET TO BUILD THE IMAGE BEFORE

# IEM configuration variables export IEM_USER="ivan.castro-bernaza@siemens.com"
export IEM_USER="<iem_user>"
export IEM_URL="<iem_URL>"
export IEM_PASSWORD="<iem_password>"

# Application configuration variables
export APP_NAME="<App_name>" # Application name
export APP_REPO="<App_repo>" # Applications repository (unique)

# IECTL environmental variables
export IE_SKIP_CERTIFICATE=true
export EDGE_SKIP_TLS=1

# Project envirinmental variables 
export PROJECT_PATH_PREFIX="<Absolute Path to src files>" # Prefix of the absolute path where the project is inside of your development environment


echo "---------------------------Creating publisher configuration---------------------------"
iectl config add publisher \
    --name "publisherdev" \
    --dockerurl "http://127.0.0.1:2375" \
    --workspace "$PROJECT_PATH_PREFIX/workspace" 

echo "---------------------------Initializing workspace---------------------------"
cd workspace
iectl publisher workspace init

echo "---------------------------Creating application---------------------------"
iectl publisher standalone-app create \
            --reponame $APP_REPO \
            --appdescription "application description"  \
            --iconpath "$PROJECT_PATH_PREFIX/appicon/icon.png" \
            --appname $APP_NAME

echo "---------------------------Creating application version---------------------------"
# Version managment 
version=$(iectl publisher standalone-app version list -a $APP_NAME -k "versionNumber" | \
        python3 $PROJECT_PATH_PREFIX/script/getAppVersion.py)

version_new=$(echo $version | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
echo 'new Version: '$version_new

iectl publisher standalone-app version create \
            --appname $APP_NAME \
            --changelogs "initial release" \
            --yamlpath "$PROJECT_PATH_PREFIX/app/docker-compose.prod.yml" \
            --versionnumber $version_new \
            -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
            -s "hello-edge" \
            -t "FromBoxReverseProxy" \
            -u "hello-edge" \
            -r "/"

echo "---------------------------Creating IEM configuration---------------------------"
iectl config add iem  \
         --name "iemdev" \
         --url $IEM_URL \
         --user $IEM_USER \
         --password $IEM_PASSWORD  

echo "---------------------------Uploading app to IEM---------------------------"
iectl publisher app-project upload catalog \
        --appname $APP_NAME \
        -v $version_new

*/