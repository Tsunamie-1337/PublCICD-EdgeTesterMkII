node {
    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2376:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        // Tries to connect to the Dind-Daemon
                        // 'localhost:2375' is the port where the Docker daemon is exposed. Look at line 4
                        // '> /dev/null 2>&1' redircets output to avoid cluttering the logs
                        sh "docker --host tcp://localhost:2376 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {//Dind-Daemon wasn't ready for another second
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) { // throws error if dind is not ready after 60 seconds
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd src/app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                // Push the image to the registry
                stage ('Upload') {
                     sh """
                        export DOCKER_HOST=tcp://docker:2375
                        cp -RT src/app /app/src/workspace
                        cd /app/src/workspace
                        ie-app-publisher-linux de c -u http://docker:2375
                        export IE_SKIP_CERTIFICATE=true
                        ie-app-publisher-linux em li -u "$IEM_URL" -e $USER_NAME -p $PSWD
                        ie-app-publisher-linux em app cuv -a $APP_ID -v 0.0.$BUILD_NUMBER -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
                        ie-app-publisher-linux em app uuv -a $APP_ID -v 0.0.$BUILD_NUMBER
                     """
                }  

                //Moeglich CLI Schnittstelle fuer automatischen Upload einzubauen.
                // Erst Waittimer dann der CLI push auf das IEVD
                //CLI Doku ist unter der edge doku schau im dateibau links und durchblaettern

                                /* Deploy to given edge device */
stage ('Deploy to Device') {
    sh """
  set -x # Debug-Ausgabe aktivieren

        # Korrekte IEM URL mit Port 9443 und dem richtigen Endpunkt
        # Annahme: Dein IEM_URL ist derzeit "https://192.168.56.4:443"
        # Wir müssen den Port und den Pfad anpassen.
        # Ersetze $IEM_URL durch die korrekte URL aus der Doku, z.B. "https://192.168.56.4:443"
        # oder konstruiere sie neu:
        # IEM_AUTH_URL="https://192.168.56.4:443/portal/api/v1/login/direct"
        # Wenn $IEM_URL bereits den Hostnamen/IP ohne Port enthält, kannst du es so machen:
        IEM_BASE_URL="https://192.168.56.4:443" # <-- HIER DEINE KORREKTE IEM IP/HOSTNAME MIT PORT 9443 EINFÜGEN
        IEM_AUTH_URL="\$IEM_BASE_URL/portal/api/v1/login/direct"

        CURL_OUTPUT_FILE="curl_response.txt"

        # 1. Get Access Token
        # JSON-Payload in einfache Anführungszeichen setzen (sehr wichtig!)
        # -L ist weiterhin nötig, falls es Umleitungen gibt
        curl -s -X POST \\
             -H "Content-Type: application/json" \\
             -d '{"username":"$USER_NAME","password":"$PSWD"}' \\
             --insecure \\
             -L \\
             "\$IEM_AUTH_URL" > "\$CURL_OUTPUT_FILE" 2>&1

        echo "--- Raw CURL Response (from file) ---"
        cat "\$CURL_OUTPUT_FILE"
        echo "-------------------------------------"

        # Jetzt versuchen, den Token aus dem Inhalt der Datei zu extrahieren
        # Korrektur: jq -r .data.access_token
        IEM_TOKEN=\$(cat "\$CURL_OUTPUT_FILE" | jq -r .data.access_token)

        # Überprüfung, ob der Token erfolgreich extrahiert wurde
        if [ -z "\$IEM_TOKEN" ] || [ "\$IEM_TOKEN" == "null" ]; then
            echo "ERROR: Failed to get IEM access_token. Check credentials, IEM URL, and CURL response."
            echo "The response did not contain a valid access_token or authentication failed."
            exit 1
        fi

        echo "Successfully obtained IEM access_token."
        echo "IEM_TOKEN (first 10 chars): \$(echo \$IEM_TOKEN | cut -c 1-10)..." # Nur zur Bestätigung, nicht den ganzen Token loggen!

        # --- Ab hier kommen die nächsten Schritte laut Doku ---

        # 2. Get Industrial Edge Application ID
        # curl -H "Authorization: Bearer \$IEM_TOKEN" -H "Content-Type:application/json" --insecure "\$IEM_BASE_URL/portal/api/v1/applications" | jq -r '.[] | select(.name=="<YOUR_APP_NAME>") | .id'
        # Hier musst du den APP_ID, den du bereits hast, verwenden.

        # 3. Get Target Industrial Edge Device ID
        # curl -H "Authorization: Bearer \$IEM_TOKEN" -H "Content-Type:application/json" --insecure "\$IEM_BASE_URL/portal/api/v1/devices" | jq -r '.[] | select(.name=="<YOUR_DEVICE_NAME>") | .id'
        # Hier musst du die DEVICE_ID ermitteln oder festlegen.

        # 4. Deploy An Application (Beispiel aus Doku)
        # curl -i -X POST -H "Authorization: Bearer \$IEM_TOKEN" \\
        #      -H "Content-Type:multipart/form-data" \\
        #      -F "infoMap={\"devices\":[\"YOUR_DEVICE_ID\"]}" \\
        #      --insecure \\
        #      "\$IEM_BASE_URL/portal/api/v1/batches?appid=$APP_ID&operation=installApplication"

        # Beispiel für Deployment (anpassen mit deiner APP_ID und ermittelter DEVICE_ID)
        # DEVICE_ID="deine_ermittelte_device_id" # <--- DIESEN WERT MUSST DU ERSETZEN
        # curl -s -X POST \\
        #      -H "Authorization: Bearer \$IEM_TOKEN" \\
        #      -H "Content-Type:multipart/form-data" \\
        #      -F "infoMap={\"devices\":[\"\$DEVICE_ID\"]}" \\
        #      --insecure \\
        #      "\$IEM_BASE_URL/portal/api/v1/batches?appid=$APP_ID&operation=installApplication" > "\$CURL_OUTPUT_FILE" 2>&1

        # echo "--- Deployment CURL Response ---"
        # cat "\$CURL_OUTPUT_FILE"
        # echo "--------------------------------"

        # ... (restlicher Code für Deployment) ...
    """
}

 //*/

            }        
        }
    }
}