node {
    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2375:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            // This script could be removed on stronger systems
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        sh "docker --host tcp://localhost:2375 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) {
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd src/app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                // Push the image to the registry
                /*
                stage ('Upload') {
                     sh """
                        # export DOCKER_HOST=tcp://docker:2375 IS THAT NEEDED? LOOK INT THE BLOCK ABOVE!!

                        # Prepare workspace
                        cp -RT src/app /app/src/workspace
                        cd /app/src/workspace

                        # Package the app
                        ie-app-publisher-linux de c -u http://docker:2375

                        # Login to IEM
                        export IE_SKIP_CERTIFICATE=true
                        ie-app-publisher-linux em li -u "$IEM_URL" -e $USER_NAME -p $PSWD

                        # Upload the app
                        ie-app-publisher-linux em app cuv -a $APP_ID -v 0.0.$BUILD_NUMBER -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
                        ie-app-publisher-linux em app uuv -a $APP_ID -v 0.0.$BUILD_NUMBER
                     """
                }*/
                        /*
                        #Deploy the app on specific device
                        ie-app-publisher-linux em app install \
                        -n CICDTestMkII \
                        -v 0.0.$BUILD_NUMBER \
                        -d $EDGE_DEVICE_ID
                        */

                        //The current version of ie-app-publisher-linux does not app deployment in its CLI

stage('Upload to IEM and deploy on Device') {
    sh '''
      # A flag for bash scripts to exit on error
      set -e

      # Prepare workspace
      cp -RT src/app /app/src/workspace
      cd /app/src/workspace

      # App-ID (numerisch) und App-Name (wie im IEM angezeigt)
      APP_ID="$APP_ID"          # Numerische ID (z.B. für Install falls nötig)
      APP_NAME="CICDTestMkII"   # Setze hier den echten IEM-Namen deiner App!

      # Publisher-Konfiguration setzen (WICHTIG!)
      # iectl config add publisher --name "publisher-dind" --dockerurl "http://docker:2375" --workspace "/app/src/workspace"
      # TEST
      iectl publisher docker-engine verify --url http://docker:2375

      echo "----- IEM Login ------"
      export IE_SKIP_CERTIFICATE=true
      export EDGE_SKIP_TLS=1
      iectl config add iem --name 'iemdev' --url "$IEM_URL" --user "$USER_NAME" --password "$PSWD"

      echo "----- Create new app version ------"
      iectl publisher app-project version create \
        -a "$APP_ID" \
        -v "0.0.${BUILD_NUMBER}" \
        -y ./docker-compose.prod.yml \
        -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
        -s 'hello-edge' \
        -t 'FromBoxReverseProxy' \
        -u 'hello-edge' \
        -r '/'

      echo "----- App-Version hochladen ------"
      iectl publisher app-project version upload -a "$APP_NAME" -v "0.0.${BUILD_NUMBER}"
      

      echo "----- Auf Edge Device deployen ------"
      iectl iem app-project install \
        -a "$APP_NAME" \
        --version "0.0.${BUILD_NUMBER}" \
        -i '{"devices":["'"$EDGE_DEVICE_ID"'"]}'
    '''
}

                stage('Cleanup Docker') {
                    sh '''
                    docker ps -a | grep docker:24-dind | awk \'{print $1}\' | xargs -r docker rm -f
                    docker system prune -af || true
                    docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi || true
                    '''
                }
            }        
        }
    }
}