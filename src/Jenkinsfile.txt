node {
    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2376:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        // Tries to connect to the Dind-Daemon
                        // 'localhost:2375' is the port where the Docker daemon is exposed. Look at line 4
                        // '> /dev/null 2>&1' redircets output to avoid cluttering the logs
                        sh "docker --host tcp://localhost:2376 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {//Dind-Daemon wasn't ready for another second
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) { // throws error if dind is not ready after 60 seconds
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd src/app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                // Push the image to the registry
                stage ('Upload') {
                     sh """
                        export DOCKER_HOST=tcp://docker:2375
                        cp -RT src/app /app/src/workspace
                        cd /app/src/workspace
                        ie-app-publisher-linux de c -u http://docker:2375
                        export IE_SKIP_CERTIFICATE=true
                        ie-app-publisher-linux em li -u "$IEM_URL" -e $USER_NAME -p $PSWD
                        ie-app-publisher-linux em app cuv -a $APP_ID -v 0.0.$BUILD_NUMBER -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
                        ie-app-publisher-linux em app uuv -a $APP_ID -v 0.0.$BUILD_NUMBER
                     """
                }  

                //Moeglich CLI Schnittstelle fuer automatischen Upload einzubauen.
                // Erst Waittimer dann der CLI push auf das IEVD
                //CLI Doku ist unter der edge doku schau im dateibau links und durchblaettern

                                /* Deploy to given edge device */
stage ('Deploy to Device') {
    sh """
       set -x # Debug-Ausgabe aktivieren (kann entfernt werden, wenn alles funktioniert)

        # Konfiguriere die Basis-URL deines IEM
        IEM_BASE_URL="https://192.168.56.4:443"

        # Definition des Authentifizierungs-Endpunkts
        IEM_AUTH_URL="\$IEM_BASE_URL/portal/api/v1/login/direct"

        # Temporäre Datei für curl-Ausgaben
        CURL_OUTPUT_FILE="curl_response.txt"

        # --- SCHRITT 1: Access Token für IEM API abrufen ---
        echo "--- Attempting to get IEM Access Token ---"
        curl -s -X POST \\
             -H "Content-Type: application/json" \\
             -d '{"username":"$USER_NAME","password":"$PSWD"}' \\
             --insecure \\
             -L \\
             "\$IEM_AUTH_URL" > "\$CURL_OUTPUT_FILE" 2>&1
        
        CURL_EXIT_CODE=\$?
        if [ "\$CURL_EXIT_CODE" -ne 0 ]; then
            echo "ERROR: curl command for authentication failed with exit code \$CURL_EXIT_CODE."
            echo "Curl output:"
            cat "\$CURL_OUTPUT_FILE"
            exit 1
        fi

        echo "--- Raw CURL Response (from authentication) ---"
        cat "\$CURL_OUTPUT_FILE"
        echo "-----------------------------------------------"

        # Extrahiere den Access Token aus der JSON-Antwort
        IEM_TOKEN=\$(cat "\$CURL_OUTPUT_FILE" | jq -r .data.access_token)

        # Überprüfung, ob der Token erfolgreich extrahiert wurde
        if [ -z "\$IEM_TOKEN" ] || [ "\$IEM_TOKEN" == "null" ]; then
            echo "ERROR: Failed to get IEM access_token. Check credentials, IEM URL, and CURL response."
            echo "The response did not contain a valid access_token or authentication failed."
            exit 1
        fi

        echo "Successfully obtained IEM access_token."
        echo "IEM_TOKEN (first 10 chars): \$(echo \$IEM_TOKEN | cut -c 1-10)..."


        # --- SCHRITT 2: Industrial Edge Application ID verwenden ---
        # Die APP_ID wird bereits in der Pipeline gesetzt
        echo "Using Application ID: \$APP_ID"


        # --- SCHRITT 3: Device ID verwenden ---
        # Die EDGE_DEVICE_ID ist jetzt eine Variable
        DEVICE_ID="\$EDGE_DEVICE_ID" # <-- VERWENDET DIE VARIABLE $EDGE_DEVICE_ID
        echo "Using Device ID: \$DEVICE_ID"

        # --- SCHRITT 4: Anwendungsversion definieren ---
        # Die APP_VERSION wird aus der Jenkins BUILD_NUMBER abgeleitet, wie im Upload-Schritt
        APP_VERSION="0.0.\$BUILD_NUMBER" # <-- Verwendet BUILD_NUMBER aus Jenkins
        echo "Using Application Version: \$APP_VERSION"


        # --- SCHRITT 5: Anwendung auf dem Edge Device deployen ---
        echo "--- Attempting to deploy application \$APP_ID version \$APP_VERSION to device \$DEVICE_ID ---"
        
        # Korrigierter infoMap-Parameter:
        # Der gesamte Wert für -F muss in einfachen Anführungszeichen stehen,
        # und die DEVICE_ID wird korrekt in den JSON-String eingefügt.
        DEPLOYMENT_RESPONSE=\$(curl -s -X POST \\
                                    -H "Authorization: Bearer \$IEM_TOKEN" \\
                                    -H "Content-Type:multipart/form-data" \\
                                    -F 'infoMap={"devices":["'"\$DEVICE_ID"'"]}' \\ # <--- KORRIGIERTE ZEILE
                                    --insecure \\
                                    "\$IEM_BASE_URL/portal/api/v1/batches?appid=\$APP_ID&operation=installApplication&version=\$APP_VERSION")
        
        DEPLOYMENT_EXIT_CODE=\$?
        if [ "\$DEPLOYMENT_EXIT_CODE" -ne 0 ]; then
            echo "ERROR: Deployment curl command failed with exit code \$DEPLOYMENT_EXIT_CODE."
            echo "Deployment response: \$DEPLOYMENT_RESPONSE"
            exit 1
        fi

        echo "--- Raw Deployment Response ---"
        echo "\$DEPLOYMENT_RESPONSE"
        echo "-------------------------------"

        # Optional: Überprüfe die Deployment-Antwort auf Erfolg oder Status
        echo "Application deployment request sent successfully."


    """
}

 //*/

            }        
        }
    }
}