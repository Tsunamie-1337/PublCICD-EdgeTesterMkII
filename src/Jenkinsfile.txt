node {
    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2376:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        // Tries to connect to the Dind-Daemon
                        // 'localhost:2375' is the port where the Docker daemon is exposed. Look at line 4
                        // '> /dev/null 2>&1' redircets output to avoid cluttering the logs
                        sh "docker --host tcp://localhost:2376 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {//Dind-Daemon wasn't ready for another second
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) { // throws error if dind is not ready after 60 seconds
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd src/app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                // Push the image to the registry
                stage ('Upload') {
                     sh """
                        export DOCKER_HOST=tcp://docker:2375
                        cp -RT src/app /app/src/workspace
                        cd /app/src/workspace
                        ie-app-publisher-linux de c -u http://docker:2375
                        export IE_SKIP_CERTIFICATE=true
                        ie-app-publisher-linux em li -u "$IEM_URL" -e $USER_NAME -p $PSWD
                        ie-app-publisher-linux em app cuv -a $APP_ID -v 0.0.$BUILD_NUMBER -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
                        ie-app-publisher-linux em app uuv -a $APP_ID -v 0.0.$BUILD_NUMBER
                     """
                }  

                //Moeglich CLI Schnittstelle fuer automatischen Upload einzubauen.
                // Erst Waittimer dann der CLI push auf das IEVD
                //CLI Doku ist unter der edge doku schau im dateibau links und durchblaettern

                                /* Deploy to given edge device */
stage ('Deploy to Device') {
    sh """
        # 1. Get Access Token
        # Den gesamten JSON-Payload in einfache Anführungszeichen setzen
        # Die Ausgabe von curl in eine Variable speichern und ausgeben
        
        CURL_RESPONSE=\$(curl -s -X POST \\
             -H "Content-Type: application/json" \\
             -d '{"username":"$USER_NAME","password":"$PSWD"}' \\
             --insecure \\
             "$IEM_URL/api/v1/auth/login")

        echo "--- Raw CURL Response ---"
        echo "\$CURL_RESPONSE"
        echo "-------------------------"

        # Jetzt versuchen, den Token aus der Antwort zu extrahieren
        IEM_TOKEN=\$(echo "\$CURL_RESPONSE" | jq -r .token)

        if [ -z "\$IEM_TOKEN" ]; then
            echo "Failed to get IEM token. Check credentials, IEM URL/certificate, or CURL response."
            # Wenn IEM_TOKEN leer ist, könnte es sein, dass jq keinen Token gefunden hat oder die Antwort kein JSON war.
            # Die Raw CURL Response sollte uns mehr Aufschluss geben.
            exit 1
        fi

        echo "Successfully obtained IEM token."

        # 2. Find Device ID (example, replace with actual IEM API call)
        # This needs to be fetched dynamically or configured.
        # Example: DEVICE_ID=\$(curl -s -H "Authorization: Bearer \$IEM_TOKEN" "$IEM_URL/api/v1/devices?name=MyEdgeDevice" | jq -r '.[0].id')
        DEVICE_ID="529662ec59c247e29812a8f2dd824640" # <<< ERSETZE DIES MIT DER ECHTEN GERÄTE-ID ODER HOL SIE DYNAMISCH

        # 3. Find App ID and Version (you already have APP_ID and BUILD_NUMBER)
        APP_VERSION="0.0.$BUILD_NUMBER"

        # 4. Create/Update Deployment (example, replace with actual IEM API call)
        # This is the most complex part, as it involves creating a deployment plan
        # or assigning the app to the device.
        # You would typically send a POST request to an endpoint like /api/v1/deployments
        # with a JSON payload specifying the device, app, and version.

        # Example: Triggering a deployment (highly simplified and conceptual)
        curl -X POST -H "Authorization: Bearer \$IEM_TOKEN" \\
             -H "Content-Type: application/json" \\
             -d '{
                   "deviceId": "\$DEVICE_ID",
                   "applicationId": "$APP_ID",
                   "applicationVersion": "\$APP_VERSION",
                   "action": "deploy"
                 }' \\
             --insecure \\
             "$IEM_URL/api/v1/deployments"

        echo "Deployment triggered for device \$DEVICE_ID with app $APP_ID version \$APP_VERSION"
    """
}

 //*/

            }        
        }
    }
}