node {
    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2376:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            // This script could be removed on stronger systems
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        sh "docker --host tcp://localhost:2376 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) {
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd src/app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                // Push the image to the registry
                stage ('Upload') {
                     sh """
                        export DOCKER_HOST=tcp://docker:2375

                        # Prepare workspace
                        cp -RT src/app /app/src/workspace
                        cd /app/src/workspace

                        # Package the app
                        ie-app-publisher-linux de c -u http://docker:2375

                        # Login to IEM
                        export IE_SKIP_CERTIFICATE=true
                        ie-app-publisher-linux em li -u "$IEM_URL" -e $USER_NAME -p $PSWD

                        # Upload the app
                        ie-app-publisher-linux em app cuv -a $APP_ID -v 0.0.$BUILD_NUMBER -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
                        ie-app-publisher-linux em app uuv -a $APP_ID -v 0.0.$BUILD_NUMBER

                        #Deploy the app on specific device
                        ie-app-publisher-linux em app install \
                        -n CICDTestMkII \
                        -v 0.0.$BUILD_NUMBER \
                        -d $EDGE_DEVICE_ID
                     """
                }
                /* Deploy the image to the edge device
                stage('Deploy to Device') {
                    script {
                        sh '''
                            set -e

                            # Environmentvariablen wie gehabt
                            echo "APP_ID=$APP_ID"
                            echo "EDGE_DEVICE_ID=$EDGE_DEVICE_ID"
                            echo "USER_NAME=$USER_NAME"
                            echo "PSWD=<hidden>"
                            echo "IEM_URL=$IEM_URL"

                            VERSION="0.0.$BUILD_NUMBER"

                            # Token holen
                            IEM_TOKEN=$(curl -s -X POST \
                                -H "Content-Type: application/json" \
                                -d '{"username":"'"$USER_NAME"'","password":"'"$PSWD"'"}' \
                                --insecure \
                                "$IEM_URL/portal/api/v1/login/direct" | jq -r '.data.access_token')

                            if [ -z "$IEM_TOKEN" ] || [ "$IEM_TOKEN" == "null" ]; then
                                echo "ERROR: Failed to get IEM access_token!"
                                exit 2
                            fi

                            DEPLOY_OUTPUT="deploy_curl_response.txt"



                                        # Warteschleife 1-3 Minuten (maximal 18*10s = 3 Minuten)
                                        export IE_SKIP_CERTIFICATE=true
                                        ie-app-publisher-linux em li -u "$IEM_URL" -e "$USER_NAME" -p "$PSWD"

                                        echo "Warte, bis neue App-Version im Status 'PUBLISHED' oder 'RELEASED' ist ..."
                                        for i in {1..18}; do
                                            RESPONSE=$(ie-app-publisher-linux em app detail -a "$APP_ID" 2>&1)
                                            if echo "$RESPONSE" | grep -q 'Application detail not found'; then
                                                echo "IEM noch nicht synchron, retry in 10s ..."
                                                sleep 10
                                                continue
                                            fi
                                            STATUS=$(echo "$RESPONSE" | jq -r '.versions[] | select(.versionNumber=="'$VERSION'") | .status')
                                            echo "Version $VERSION Status: $STATUS"
                                            if [ "$STATUS" = "PUBLISHED" ] || [ "$STATUS" = "RELEASED" ]; then
                                                echo "Version $VERSION ist $STATUS! Deployment wird gestartet."
                                                break
                                            fi
                                            sleep 10
                                        done



                            curl -i -X POST \
                                -H "Authorization: Bearer $IEM_TOKEN" \
                                -H "Content-Type:multipart/form-data" \
                                -F "infoMap={\\\"devices\\\":[\\\"$EDGE_DEVICE_ID\\\"]}" \
                                --insecure \
                                "$IEM_URL/portal/api/v1/batches?appid=$APP_ID&operation=installApplication" \
                                > "$DEPLOY_OUTPUT" 2>&1

                            STATUS=$(grep HTTP "$DEPLOY_OUTPUT" | tail -1 | awk '{print $2}')
                            echo "Deployment HTTP-Status: $STATUS"
                            cat "$DEPLOY_OUTPUT"

                            if [ "$STATUS" != "200" ] && [ "$STATUS" != "201" ]; then
                                echo "ERROR: Deployment failed, see above."
                                exit 1
                            fi
                        '''
                    }
                }*/
                stage('Cleanup Docker') {
                    sh '''
                    docker system prune -af || true
                    docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi || true
                    '''
                }
            }        
        }
    }
}