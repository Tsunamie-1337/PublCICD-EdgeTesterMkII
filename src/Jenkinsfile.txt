node {
    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2376:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        sh "docker --host tcp://localhost:2376 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) {
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd src/app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                // Push the image to the registry
                stage ('Upload') {
                     sh """
                        export DOCKER_HOST=tcp://docker:2375
                        cp -RT src/app /app/src/workspace
                        cd /app/src/workspace
                        ie-app-publisher-linux de c -u http://docker:2375
                        export IE_SKIP_CERTIFICATE=true
                        ie-app-publisher-linux em li -u "$IEM_URL" -e $USER_NAME -p $PSWD
                        ie-app-publisher-linux em app cuv -a $APP_ID -v 0.0.$BUILD_NUMBER -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
                        ie-app-publisher-linux em app uuv -a $APP_ID -v 0.0.$BUILD_NUMBER
                        
                        echo "Waiting 15 seconds for IEM to process the upload..."
                        sleep 15
                     """
                }  

                //Moeglich CLI Schnittstelle fuer automatischen Upload einzubauen.
                // Erst Waittimer dann der CLI push auf das IEVD
                //CLI Doku ist unter der edge doku schau im dateibau links und durchblaettern

                                /* Deploy to given edge device */
                stage ('Deploy to Device') {
                    script {
                        sh '''#!/bin/bash
                            set -x # Debug-Ausgabe aktivieren (kann entfernt werden, wenn alles funktioniert)

                            export IE_SKIP_CERTIFICATE=true

                            IEM_BASE_URL="https://192.168.56.4:443"
                            IEM_AUTH_URL="\$IEM_BASE_URL/portal/api/v1/login/direct"
                            AUTH_CURL_OUTPUT_FILE="auth_curl_response.txt"

                            echo "--- Attempting to get IEM Access Token ---"
                            curl -s -X POST -H "Content-Type: application/json" -d '{"username":"'"${USER_NAME}"'","password":"'"${PSWD}"'"}' --insecure -L "\$IEM_AUTH_URL" > "\$AUTH_CURL_OUTPUT_FILE" 2>&1
                            
                            CURL_EXIT_CODE=\$?
                            if [ "\$CURL_EXIT_CODE" -ne 0 ]; then
                                echo "ERROR: curl command for authentication failed with exit code \$CURL_EXIT_CODE."
                                echo "Curl output:"
                                cat "\$AUTH_CURL_OUTPUT_FILE"
                                exit 1
                            fi

                            echo "--- Raw CURL Response (from authentication) ---"
                            cat "\$AUTH_CURL_OUTPUT_FILE"
                            echo "-----------------------------------------------"

                            IEM_TOKEN=\$(cat "\$AUTH_CURL_OUTPUT_FILE" | jq -r .data.access_token)

                            if [ -z "\$IEM_TOKEN" ] || [ "\$IEM_TOKEN" == "null" ]; then
                                echo "ERROR: Failed to get IEM access_token. Check credentials, IEM URL, and CURL response."
                                echo "The response did not contain a valid access_token or authentication failed."
                                exit 1
                            fi

                            echo "Successfully obtained IEM access_token."
                            echo "IEM_TOKEN (first 10 chars): \$(echo \$IEM_TOKEN | cut -c 1-10)..."


                            echo "Using Application ID: \$APP_ID"
                            DEVICE_ID="\$EDGE_DEVICE_ID"
                            echo "Using Device ID: \$DEVICE_ID"
                            APP_VERSION="0.0.\$BUILD_NUMBER"
                            echo "Attempting to deploy Application Version: \$APP_VERSION"


                            # --- DIAGNOSE: Hilfe für ie-app-publisher-linux em app detail ---
                            echo "--- Getting help for ie-app-publisher-linux em app detail ---"
                            ie-app-publisher-linux em li -u "\$IEM_BASE_URL" -e "\$USER_NAME" -p "\$PSWD" # Login für CLI
                            ie-app-publisher-linux em app detail --help # <-- NEUER BEFEHL
                            echo "-------------------------------------------------------------------"

                            # --- DIAGNOSE: Hilfe für ie-app-publisher-linux em app ---
                            echo "--- Getting help for ie-app-publisher-linux em app ---"
                            ie-app-publisher-linux em app --help # <-- NEUER BEFEHL
                            echo "-------------------------------------------------------------------"

                            # --- SCHRITT 5: Anwendung auf dem Edge Device deployen ---
                            echo "--- Attempting to deploy application \$APP_ID version \$APP_VERSION to device \$DEVICE_ID ---"
                            
                            DEPLOY_CURL_OUTPUT_FILE="deploy_curl_response.txt"

                            # KORRIGIERTER CURL-BEFEHL: OHNE &version=\$APP_VERSION PARAMETER
                            curl -s -X POST \\
                                                -H "Authorization: Bearer \$IEM_TOKEN" \\
                                                -H "Content-Type:multipart/form-data" \\
                                                -F 'infoMap={"devices":["'"\$DEVICE_ID"'"]}' \\
                                                --insecure \\
                                                "\$IEM_BASE_URL/portal/api/v1/batches?appid=\$APP_ID&operation=installApplication" > "\$DEPLOY_CURL_OUTPUT_FILE" 2>&1 # <-- &version=\$APP_VERSION ENTFERNT
                            
                            CURL_EXIT_CODE=\$?
                            if [ "\$CURL_EXIT_CODE" -ne 0 ]; then
                                echo "ERROR: Deployment curl command failed with exit code \$CURL_EXIT_CODE."
                                echo "Deployment response:"
                                cat "\$DEPLOY_CURL_OUTPUT_FILE"
                                exit 1
                            fi

                            echo "--- Raw Deployment Response ---"
                            cat "\$DEPLOY_CURL_OUTPUT_FILE"
                            echo "-------------------------------"

                            echo "Application deployment request sent successfully."
                        '''
                    }
                }

 //*/
            }        
        }
    }
}