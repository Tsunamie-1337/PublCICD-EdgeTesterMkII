pipeline {
    agent any

    environment {
        DOCKER_HOST = "unix:///var/run/docker.sock"  // oder tcp://docker:2375 bei DIND
        IE_SKIP_CERTIFICATE = "true"                 // Beispiel, falls für Upload nötig
        // Weiter env-Variablen ggf. aus Jenkins-Credentials hier angeben!
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Images') {
            steps {
                dir('src/docker') {
                    sh 'docker compose build'
                }
            }
        }
        stage('Start Services') {
            steps {
                dir('src/docker') {
                    sh 'docker compose up -d'
                }
            }
        }
stage('Upload') {
    steps {
        sh '''
            set -e

            # Clean & prepare workspace für Publisher
            rm -rf /tmp/publisher-workspace
            mkdir -p /tmp/publisher-workspace

            # Copy alle nötigen Dateien in den Workspace (passe ggf. die Quelle an)
            cp -RT src/docker/app /tmp/publisher-workspace

            # Falls publish/ und cfg-data/ leer sind, lege Dummydatei an (CLI mag manchmal keine komplett leeren Ordner)
            touch /tmp/publisher-workspace/publish/.dummy || true
            touch /tmp/publisher-workspace/cfg-data/.dummy || true

            cd /tmp/publisher-workspace

            # Docker Host korrekt setzen
            export DOCKER_HOST=tcp://docker:2375

            # Docker-Engine connecten
            ie-app-publisher-linux de c -u http://docker:2375

            # Zertifikats-Check für Edge Management ggf. überspringen
            export IE_SKIP_CERTIFICATE=true

            # Login in Edge Management
            ie-app-publisher-linux em li -u "$IEM_URL" -e "$USER_NAME" -p "$PSWD"

            # App Compose Upload
            ie-app-publisher-linux em app cuv \
                -a "$APP_ID" \
                -v "0.0.$BUILD_NUMBER" \
                -y ./docker-compose.prod.yml \
                -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
                -s "hello-edge" \
                -t "FromBoxReverseProxy" \
                -u "hello-edge" \
                -r "/"

            # App Compose Deploy
            ie-app-publisher-linux em app uuv -a "$APP_ID" -v "0.0.$BUILD_NUMBER"
        '''
    }
}
        stage('Test') {
            steps {
                echo 'No tests implemented yet'
            }
        }
        stage('Shutdown') {
            steps {
                dir('src/docker') {
                    sh 'docker compose down'
                }
            }
        }
    }
    post {
        always {
            dir('src/docker') {
                sh 'docker compose down || true'
            }
        }
    }
}