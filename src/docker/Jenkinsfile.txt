pipeline {
    agent any

    environment {
        DOCKER_HOST = "unix:///var/run/docker.sock"  // oder tcp://docker:2375 bei DIND
        IE_SKIP_CERTIFICATE = "true"                 // Beispiel, falls für Upload nötig
        // Weiter env-Variablen ggf. aus Jenkins-Credentials hier angeben!
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Images') {
            steps {
                dir('src/docker') {
                    sh 'docker compose build'
                }
            }
        }
        stage('Start Services') {
            steps {
                dir('src/docker') {
                    sh 'docker compose up -d'
                }
            }
        }
        stage('Deploy to Edge Device') {
            steps {
                dir('src/docker') { //The app publisher was copied into the /usr/local/bin/ directory beforehand
                    sh '''
                # ---- Configure Docker Engine ----
                ie-app-publisher-linux de c -u http://localhost:2375

                # ---- Login into Edge Management ----
                ie-app-publisher-linux em li -u "$IEM_URL" -e "$USER_NAME" -p "$PSWD"

                # ---- App Compose Upload ----
                ie-app-publisher-linux em app cuv \
                  -a "$APP_ID" \
                  -v "0.0.$BUILD_NUMBER" \
                  -y docker compose.prod.yml \
                  -n '{"conntest_frontend":[{"name":"conntest_frontend","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
                  -s "conntest_frontend" \
                  -t "FromBoxReverseProxy" \
                  -u "conntest_frontend" \
                  -r "/"

                # ---- App Compose Deploy ----
                ie-app-publisher-linux em app uuv \
                  -a "$APP_ID" \
                  -v "0.0.$BUILD_NUMBER"
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                echo 'No tests implemented yet'
            }
        }
        stage('Shutdown') {
            steps {
                dir('src/docker') {
                    sh 'docker compose down'
                }
            }
        }
    }
    post {
        always {
            dir('src/docker') {
                sh 'docker compose down || true'
            }
        }
    }
}