node {
checkout scm
    withEnv(['HOME=.']) {          
                stage ('Build') {
                    sh """
                        cd src/app
                        docker-compose build
                    """
                }
                
        stage('Upload and Deploy') { // Stage umbenannt, da sie jetzt auch die Bereitstellung umfasst
                echo 'Uploading application to IEM and deploying on device...'
                sh """
                    set -e # Beende das Skript sofort, wenn ein Befehl fehlschlägt

 
                    rm -rf iectl_workspace
                    mkdir iectl_workspace
                    cp -RT app ./iectl_workspace
                    cd iectl_workspace

                    # 2. iectl Publisher konfigurieren
                    # Wir verwenden 'localhost:2375' für den Docker-Daemon, da die Images lokal auf dem Agenten gebaut wurden.
                    # '--workspace "."': iectl soll im aktuellen Verzeichnis nach den Projektdateien suchen.
                    iectl config add publisher --name "publisher-local" --dockerurl "http://localhost:2375" --workspace "."

                    # 3. IEM-Login konfigurieren
                    export IE_SKIP_CERTIFICATE=true
                    export EDGE_SKIP_TLS=1
                    iectl config add iem --name 'iemdev' --url "${IEM_URL}" --user "${USER_NAME}" --password "${PSWD}"

                    # 4. Neue Anwendungsversion im IEM erstellen
                    # Dieser Befehl lädt die Anwendung (inkl. der referenzierten Docker-Images vom lokalen Daemon) ins IEM hoch.
                    iectl publisher app-project version create \\
                        -a "${APP_ID}" \\
                        -v "0.0.${BUILD_NUMBER}" \\
                        -y ./docker-compose.prod.yml \\
                        -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \\
                        -s 'hello-edge' \\
                        -t 'FromBoxReverseProxy' \\
                        -u 'hello-edge' \\
                        -r '/'

                    # 5. Anwendungsversion auf dem Edge-Gerät bereitstellen
                    # Dieser Schritt ersetzt den 'uuv'-Befehl aus der ursprünglichen Methode A und entspricht der Bereitstellungslogik von Methode B.
                    iectl iem app-project install \\
                        -a "${APP_NAME}" \\
                        --version "0.0.${BUILD_NUMBER}" \\
                        -i '{"devices":["'"${EDGE_DEVICE_ID}"'"]}'
                """
            
        }
                stage('Cleanup Docker') {
                    sh """
                    docker ps -a | grep docker:24-dind | awk \'{print \$1}\' | xargs -r docker rm -f
                    docker system prune -af || true
                    docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi || true
                    """
                }
    }        
 }