node {
checkout scm
    withEnv(['HOME=.']) {          
                stage ('Build') {
                    sh """
                        cd src/app
                        docker-compose build
                    """
                }
                
                stage('Upload to IEM and deploy on Device') {
                    sh '''
                    # A flag for bash scripts to exit on error
                    set -e

                    rm -rf workspace
                    mkdir workspace
                    tree
                    cd workspace
                    ls -la
                    ie-app-publisher-linux ws init
                    cd ..
                    cp -RT src/app ./workspace
                    cd workspace
                    ie-app-publisher-linux de c -u http://localhost:2375
                    export IE_SKIP_CERTIFICATE=true
                    ie-app-publisher-linux em li -u "$IEM_URL" -e $USER_NAME -p $PSWD
                    ie-app-publisher-linux em app cuv -a $APP_ID -v 0.0.$BUILD_NUMBER -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
                    ie-app-publisher-linux em app uuv -a $APP_ID -v 0.0.$BUILD_NUMBER

                    echo "----- IEM Login ------"
                    #set envireonment variables for iectl
                    export IE_SKIP_CERTIFICATE=true
                    export EDGE_SKIP_TLS=1
                    iectl config add iem --name 'iemdev' --url "${IEM_URL}" --user "${USER_NAME}" --password "${PSWD}"

                    echo "----- Deploy on edge device ------"
                    iectl iem app-project install \
                        -a "${APP_NAME}" \
                        --version "0.0.${BUILD_NUMBER}" \
                        -i '{"devices":["'"${EDGE_DEVICE_ID}"'"]}'
                    '''
                }

                stage('Cleanup Docker') {
                    sh """
                    docker ps -a | grep docker:24-dind | awk \'{print \$1}\' | xargs -r docker rm -f
                    docker system prune -af || true
                    docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi || true
                    """
                }
    }        
 }