node {

    //Set Absolute Path to src files here
    env.PROJECT_PATH_PREFIX="src/optB-Docker-inJenkins"

    checkout scm
    withEnv(['HOME=.']) {          
        docker.image('docker:24-dind').withRun('-p 2375:2375 --privileged -e DOCKER_TLS_CERTDIR=""') { c ->
            // Dynamic check for Dind-Daemon readiness
            // This script could be removed on stronger systems
            script {
                def dindReady = false
                echo "Waiting for Dind-Daemon..."

                for (int i = 0; i < 60; i++) {
                    try {
                        sh "docker --host tcp://localhost:2375 info > /dev/null 2>&1"
                        echo "Dind-Daemon is ready!"
                        dindReady = true
                        break 
                    } catch (Exception e) {
                        echo "Dind-Daemon is not ready yet, trying again in 1 second... (${i+1}/60)"
                        sleep 1 
                    }
                }

                if (!dindReady) {
                    error "Dind-Daemon is not ready in the expected timeframe."
                }
            }
            //Start the Docker CLI inside the Dind container
            docker.image("${env.DOCKER_IMAGE_CLI}").inside("--link ${c.id}:docker --privileged -u root") {
                stage ('Build') {
                    sh """
                        cd /app
                        export DOCKER_HOST=tcp://docker:2375
                        docker-compose build
                        docker images
                        cd ..
                    """
                }
                
                stage('Upload to IEM and deploy on Device') {
                    sh '''
                    # A flag for bash scripts to exit on error
                    set -e

                    # Set Variables
                    # Most Variables were set in Jenkins under Environment Variables
                    #APP_ID="$APP_ID"          # Numeric ID of the App being deployed
                    #APP_NAME="$APP_NAME"   # Name of the App being deployed

                    echo "----- Prepare workspace ------"
                    cp -RT src/app /app/src/workspace
                    cd /app/src/workspace

                    echo "----- Set publisher configuration ------"
                    iectl config add publisher --name "publisher-dind" --dockerurl "http://docker:2375" --workspace "./workspace"

                    echo "----- IEM Login ------"
                    export IE_SKIP_CERTIFICATE=true
                    export EDGE_SKIP_TLS=1
                    iectl config add iem --name 'iemdev' --url "$IEM_URL" --user "$USER_NAME" --password "$PSWD"

                    echo "----- Create new app version ------"
                    # I have used BUILD_NUMBER from Jenkins to create versions. If the apps are being deployed differentley as well you would need to get the version via "app-details"
                    iectl publisher app-project version create \
                        -a "$APP_ID" \
                        -v "0.0.${BUILD_NUMBER}" \
                        -y ./docker-compose.prod.yml \
                        -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' \
                        -s 'hello-edge' \
                        -t 'FromBoxReverseProxy' \
                        -u 'hello-edge' \
                        -r '/'

                    echo "----- Deploy on edge device ------"
                    iectl iem app-project install \
                        -a "$APP_NAME" \
                        --version "0.0.${BUILD_NUMBER}" \
                        -i '{"devices":["'"$EDGE_DEVICE_ID"'"]}'
                    '''
                }

                stage('Cleanup Docker') {
                    sh '''
                    docker ps -a | grep docker:24-dind | awk \'{print $1}\' | xargs -r docker rm -f
                    docker system prune -af || true
                    docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi || true
                    '''
                }
            }        
        }
    }
}